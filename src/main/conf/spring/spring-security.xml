<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:sec="http://www.springframework.org/schema/security"
	   xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-4.2.xsd">


<!-- 启用方法控制访问权限  用于直接拦截接口上的方法，拥有权限才能访问此方法-->
	<!--<sec:global-method-security jsr250-annotations="enabled"/>-->
	<!-- 自己写登录页面，并且登陆页面不拦截 -->
	<sec:http pattern="/jsp/login.jsp" security="none" />
	<sec:http pattern="/jsp/403.jsp" security="none" />
	<!-- 不拦截静态资源 -->
	<sec:http pattern="/css/**" security="none"/>
	<sec:http pattern="/lib/**" security="none"/>
	<sec:http pattern="/js/**" security="none"/>
	<sec:http pattern="/img/**" security="none"/>
	<sec:http pattern="/html/**" security="none"/>
	<sec:http pattern="**.ico" security="none"/>
	<!-- 配置拦截页面  -->								<!-- 启用页面级权限控制 使用表达式 -->
	<sec:http auto-config="true" use-expressions="true">
		<!-- requires-channel="any" 设置访问类型http或者https -->
		<!--<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" requires-channel="any"/>  -->
		<!-- intercept-url pattern="/admin/**" 拦截地址的设置有加载先后的顺序，
        admin/**在前面请求admin/admin.jsp会先去拿用户验证是否有ROLE_ADMIN权限，有则通过，没有就拦截。如果shi
        pattern="/**" 设置在前面，当前登录的用户有ROLE_USER权限，那么就可以登录到admin/admin.jsp
        所以两个配置有先后的。
         -->
		<!--<sec:intercept-url pattern="/lib/**" access="IS_AUTHENTICATED_ANONYMOUSLY" requires-channel="any"/>-->

		<!-- 设置用户默认登录页面以及登陆后默认跳转页面 -->
		<!--<sec:form-login authentication-failure-url="/jsp/login.jsp" authentication-success-forward-url="/jsp/user.jsp" login-page="/jsp/login.jsp" login-processing-url="/j_spring_security_check"/>-->
		<sec:form-login login-page="/jsp/login.jsp"
						login-processing-url="/login"
						authentication-success-forward-url="/loginSucceed.do"
						authentication-failure-forward-url="/loginFailed.do"
						username-parameter="j_username"
						password-parameter="j_password"
		/>
		<!-- 设置用户默认退出登录页面 -->
		<sec:logout logout-url="/logout" logout-success-url="/logoutSucceed.do" invalidate-session="true"/>
		<!-- 对于没有权限的页面跳转到-->
		<sec:access-denied-handler error-page="/jsp/403.jsp"/>

		<!-- 基于url的权限控制，加载权限资源管理拦截器,如果进行这样的设置，那么
         <intercept-url pattern="/admin/**" 就可以不进行配置了，会在数据库的资源权限中得到对应。
         对于没有找到资源的权限为null的值就不需要登录才可以查看，相当于public的。可以公共访问
          -->
		<sec:custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		<sec:csrf disabled="true"/>
	</sec:http>
  	
  	<!-- 当基于方法权限控制的时候只需要此配置，在接口上加上权限即可控制方法的调用
  	<authentication-manager>
  		<authentication-provider user-service-ref="myUserDetailsService"/>
  	</authentication-manager>
  	  -->
  	
  	
  	<!-- 资源权限控制 -->
  	<bean id="securityFilter" class="com.edrive.common.context.MySecurityFilter">
  		<!-- 用户拥有的权限 -->
    	<property name="authenticationManager" ref="myAuthenticationManager" />
    	<!-- 用户是否拥有所请求资源的权限 -->
    	<property name="accessDecisionManager" ref="myAccessDecisionManager" />
    	<!-- 资源与权限对应关系 -->
    	<property name="securityMetadataSource" ref="mySecurityMetadataSource" />

	</bean>

	<!--     获取访问url对应的所有权限 -->
	<bean id="mySecurityMetadataSource" class="com.edrive.common.context.MySecurityMetadataSource" />

	<!--     校验用户的权限是否足够 -->
	<bean id="myAccessDecisionManager" class="com.edrive.common.context.MyAccessDecisionManager"/>

	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<bean id="myUserDetailsService" class="com.edrive.common.context.MyUserDetailsService"/>

	<!-- 自定义的密码加密器 -->
	<bean id="myPasswordEncoder" class="com.edrive.common.context.MyPasswordEncoder"/>
	<sec:authentication-manager alias="myAuthenticationManager">
  		<!-- 权限控制 引用 id是myUserDetailsService的server -->
  		<sec:authentication-provider user-service-ref="myUserDetailsService">
			<sec:password-encoder ref="myPasswordEncoder"/>
		</sec:authentication-provider>
  	</sec:authentication-manager>


</beans>